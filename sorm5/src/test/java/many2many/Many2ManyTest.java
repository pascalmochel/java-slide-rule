package many2many;

import many2many.ent.A;
import many2many.ent.AB;
import many2many.ent.B;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.morm.mapper.DataMapper;
import org.morm.record.Entity;
import org.morm.session.SessionFactory;
import org.morm.test.EntityTest2;

import java.util.Arrays;

import static org.junit.Assert.*;

public class Many2ManyTest {

	static {
		new EntityTest2();
	}

	@Before
	public void before() {
		SessionFactory.getSession().open();

		DataMapper.executeDDLIgnoringErrors("DROP TABLE A");
		DataMapper.executeDDLIgnoringErrors("DROP TABLE B");
		DataMapper.executeDDLIgnoringErrors("DROP TABLE AB");

		DataMapper.executeDDL(
		/**/"CREATE TABLE AB (" +
		/**/"ID_AB INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"ID_A INTEGER," +
		/**/"ID_B INTEGER)"
		/**/);
		DataMapper.executeDDL(
		/**/"CREATE TABLE A(" +
		/**/"ID_A INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20))"
		/**/);
		DataMapper.executeDDL(
		/**/"CREATE TABLE B(" +
		/**/"ID_B INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20))"
		/**/);
		SessionFactory.getSession().commit();
	}

	@After
	public void after() {
		SessionFactory.getSession().open();
		DataMapper.executeDDLIgnoringErrors("DROP TABLE A");
		DataMapper.executeDDLIgnoringErrors("DROP TABLE B");
		DataMapper.executeDDLIgnoringErrors("DROP TABLE AB");
		SessionFactory.getSession().commit();
	}

	@Test
	public void testA() {

		SessionFactory.getSession().open();

		try {

			final A a = new A("myA");
			final B b = new B("myB");
			final AB ab = new AB("myAB");
			{

				a.setAbs(Arrays.asList(ab));
				ab.setB(b);

				a.store();
			}

			SessionFactory.getSession().getIdentityMap().clear();

			{
				final A q = Entity.loadById(A.class, a.getId());
				assertEquals("[ID_A=100, NAME=myA, [...]]", q.toString());
				System.out.println(q.getAbs());
				assertEquals(
						"[ID_A=100, NAME=myA, [[ID_AB=100, NAME=myAB, ID_A=100=>[...], ID_B=100=>[...]]]]", q
								.toString());
				System.out.println(q.getAbs().get(0).getB());
				assertEquals(
						"[ID_A=100, NAME=myA, [[ID_AB=100, NAME=myAB, ID_A=100=>[...], ID_B=100=>[ID_B=100, NAME=myB, [...]]]]]",
						q.toString());

			}

		} finally {
			SessionFactory.getSession().rollback();
		}
	}

	@Test
	public void testAB() {

		SessionFactory.getSession().open();

		try {

			final AB ab = new AB("myAB");
			{
				final A a = new A("myA");
				final B b = new B("myB");

				ab.setA(a);
				ab.setB(b);

				ab.store();
			}

			SessionFactory.getSession().getIdentityMap().clear();

			{
				final AB q = Entity.loadById(AB.class, ab.getId());
				assertEquals("[ID_AB=100, NAME=myAB, ID_A=100=>[...], ID_B=100=>[...]]", q.toString());
				q.getA();
				q.getB();
				assertEquals(
						"[ID_AB=100, NAME=myAB, ID_A=100=>[ID_A=100, NAME=myA, [...]], ID_B=100=>[ID_B=100, NAME=myB, [...]]]",
						q.toString());
			}

		} finally {
			SessionFactory.getSession().rollback();
		}
	}

}
