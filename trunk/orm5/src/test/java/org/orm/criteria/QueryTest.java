package org.orm.criteria;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.orm.mapper.DataMapper;
import org.orm.record.field.regular.primitive.FShort;
import org.orm.session.SessionFactory;
import org.orm.test.EntityTest2;

import java.util.List;

import static org.junit.Assert.*;
import static org.orm.criteria.Criteria.*;

public class QueryTest {

	static {
		new EntityTest2();
	}

	@Before
	public void before() {
		SessionFactory.getSession().open();

		DataMapper.executeDDLIgnoringErrors("DROP TABLE A");

		DataMapper.executeDDL(
		/**/"CREATE TABLE A(" +
		/**/"ID_A INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(10)," +
		/**/"CITY VARCHAR(10)," +
		/**/"AGE INTEGER" +
		/**/")"
		/**/);
		SessionFactory.getSession().commit();
	}

	@After
	public void after() {
		try {
			SessionFactory.getSession().open();
			DataMapper.executeDDLIgnoringErrors("DROP TABLE A");
			SessionFactory.getSession().commit();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void testA() throws Exception {

		SessionFactory.getSession().open();

		DataMapper.executeDDL("INSERT INTO A (ID_A,NAME,CITY,AGE) VALUES (1,'MH','SBD',29)");
		DataMapper.executeDDL("INSERT INTO A (ID_A,NAME,CITY,AGE) VALUES (2,'RH','BCN',23)");
		DataMapper.executeDDL("INSERT INTO A (ID_A,NAME,CITY,AGE) VALUES (3,'MH','BCN',22)");
		DataMapper.executeDDL("INSERT INTO A (ID_A,NAME,CITY,AGE) VALUES (4,'RO','VIC',27)");
		DataMapper.executeDDL("INSERT INTO A (ID_A,NAME,CITY,AGE) VALUES (5,'CA','LNZ',52)");

		try {

			final List<A> vellsPerCity =
			/**/query("SELECT NULL AS ID_A, MAX(NAME) AS NAME, CITY, MAX(AGE) AS AGE FROM A GROUP BY CITY")
			/**/.list(A.class);

			assertEquals(
			/**/"[[ID_A=null, NAME=MH, CITY=SBD, AGE=29], " +
			/**/"[ID_A=null, NAME=RH, CITY=BCN, AGE=23], " +
			/**/"[ID_A=null, NAME=RO, CITY=VIC, AGE=27], " +
			/**/"[ID_A=null, NAME=CA, CITY=LNZ, AGE=52]]"
			/**/, vellsPerCity.toString());

			final int count = query("SELECT COUNT(*) AS VALUE FROM A").getColumnValue(new FShort("VALUE"));
			assertEquals(5, count);

		} catch (final Exception e) {
			e.printStackTrace();
			throw e;
		} finally {
			SessionFactory.getSession().rollback();
		}
	}

}
