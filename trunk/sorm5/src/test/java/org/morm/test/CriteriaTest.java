package org.morm.test;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.morm.criteria.Criteria.*;

import static org.morm.criteria.impl.Order.*;
import org.morm.mapper.DataMapper;
import static org.morm.record.Entity.*;
import org.morm.session.SessionFactory;

import java.util.List;

import static org.junit.Assert.*;

public class CriteriaTest {

	static {
		new EntityTest2();
	}

	@Before
	public void before() {
		SessionFactory.getSession().open();

		DataMapper.executeDDLIgnoringErrors("DROP TABLE DOG");
		DataMapper.executeDDLIgnoringErrors("DROP TABLE RABBIT");

		DataMapper.executeDDL(
		/**/"CREATE TABLE RABBIT (" +
		/**/"ID_RABBIT INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"AGE INTEGER," +
		/**/"NUM_DOG INTEGER)"
		/**/);
		DataMapper.executeDDL(
		/**/"CREATE TABLE DOG (" +
		/**/"ID_DOG INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"AGE INTEGER)"
		/**/);
		SessionFactory.getSession().commit();
	}

	@After
	public void after() {
		try {
			SessionFactory.getSession().open();
			DataMapper.executeDDL("DROP TABLE RABBIT");
			DataMapper.executeDDL("DROP TABLE DOG");
			SessionFactory.getSession().commit();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void testInsertDogInsertRabbits() {

		SessionFactory.getSession().open();
		DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (50,'din',10)");
		DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (51,'faria',9)");
		DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (52,'gossa',8)");
		DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (53,'blanca',7)");
		DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (54,'negra',6)");
		DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (55,'pelut',5)");
		DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (56,'chucho',3)");

		try {
			assertEquals(7, loadBy(Dog.class, all()).size());

			final List<Dog> d1 = loadBy(Dog.class, where(in(Dog.name, "faria", "gossa")));
			assertEquals(
			/**/"[[ID_DOG=51, NAME=faria, AGE=9, [...]], " +
			/**/"[ID_DOG=52, NAME=gossa, AGE=8, [...]]]"
			/**/, d1.toString());

			final List<Dog> d2 = loadBy(Dog.class, where(like(Dog.name, "%egra%")));
			assertEquals(
			/**/"[[ID_DOG=54, NAME=negra, AGE=6, [...]]]"
			/**/, d2.toString());

			final List<Dog> d3 = loadBy(Dog.class, all(), orderBy(asc(Dog.age), asc(Dog.name)));
			assertEquals(
			/**/"[[ID_DOG=56, NAME=chucho, AGE=3, [...]], " +
			/**/"[ID_DOG=55, NAME=pelut, AGE=5, [...]], " +
			/**/"[ID_DOG=54, NAME=negra, AGE=6, [...]], " +
			/**/"[ID_DOG=53, NAME=blanca, AGE=7, [...]], " +
			/**/"[ID_DOG=52, NAME=gossa, AGE=8, [...]], " +
			/**/"[ID_DOG=51, NAME=faria, AGE=9, [...]], " +
			/**/"[ID_DOG=50, NAME=din, AGE=10, [...]]]"
			/**/, d3.toString());

			final List<Dog> d4 = loadBy(Dog.class, where(between(Dog.age, 3, 5)));
			assertEquals(
			/**/"[[ID_DOG=55, NAME=pelut, AGE=5, [...]], " +
			/**/"[ID_DOG=56, NAME=chucho, AGE=3, [...]]]"
			/**/, d4.toString());

			final List<Dog> d5 = loadBy(Dog.class, where(not(lt(Dog.age, 10))));
			assertEquals(
			/**/"[[ID_DOG=50, NAME=din, AGE=10, [...]]]"
			/**/, d5.toString());

			final List<Dog> d6 = loadBy(Dog.class, custom("WHERE 1=1 LIMIT 2"));
			System.out.println(d6);
			assertEquals(2, d6.size());

		} finally {
			SessionFactory.getSession().rollback();
		}
	}

}
