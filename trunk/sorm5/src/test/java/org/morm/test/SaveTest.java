package org.morm.test;

import static org.junit.Assert.*;

import java.util.Arrays;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.morm.mapper.DataMapper;
import org.morm.session.SessionFactory;

public class SaveTest {

	static {
		new EntityTest2();
	}

	@Before
	public void before() {
		SessionFactory.getCurrentSession().beginTransaction();

		DataMapper.executeDDLIgnoringErrors("DROP TABLE DOG");
		DataMapper.executeDDLIgnoringErrors("DROP TABLE RABBIT");

		DataMapper.executeDDL(
		/**/"CREATE TABLE RABBIT (" +
		/**/"ID_RABBIT INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"AGE INTEGER," +
		/**/"NUM_DOG INTEGER)"
		/**/);
		DataMapper.executeDDL(
		/**/"CREATE TABLE DOG (" +
		/**/"ID_DOG INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"AGE INTEGER)"
		/**/);
		SessionFactory.getCurrentSession().commit();
	}

	@After
	public void after() {
		SessionFactory.getCurrentSession().beginTransaction();
		DataMapper.executeDDL("DROP TABLE RABBIT");
		DataMapper.executeDDL("DROP TABLE DOG");
		SessionFactory.getCurrentSession().commit();
	}

	@Test
	public void testInsertDogInsertRabbits() {

		SessionFactory.getCurrentSession().beginTransaction();
		// DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (500,'din',9)");
		// DataMapper
		// .executeDDL("INSERT INTO RABBIT (ID_RABBIT,NAME,AGE,NUM_DOG) VALUES (600,'cornill',5, 500)");

		try {

			final Dog d = new Dog(null, "din", 10);
			d.setRabbits(Arrays.asList(new Rabbit(null, "corneju1", 3), new Rabbit(null, "corneju2", 4)));

			d.store();
			System.out.println("====================================");

			final Dog d2 = new Dog().loadById(100);
			assertEquals("[ID_DOG=100, NAME=din, AGE=10, [...]]", d2.toString());
			d2.getRabbits();
			assertEquals(
			/**/"[ID_DOG=100, NAME=din, AGE=10, " +
			/**/"[[ID_RABBIT=100, NAME=corneju1, AGE=3, NUM_DOG=100=>[...]], " +
			/**/"[ID_RABBIT=101, NAME=corneju2, AGE=4, NUM_DOG=100=>[...]]]]",
			/**/d2.toString());

		} finally {
			SessionFactory.getCurrentSession().rollback();
		}
	}

	@Test
	public void testInsertRabbitInsertDog() {

		SessionFactory.getCurrentSession().beginTransaction();

		try {

			// DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (500,'din',9)");
			// DataMapper
			// .executeDDL("INSERT INTO RABBIT (ID_RABBIT,NAME,AGE,NUM_DOG) VALUES (600,'cornill',5, 500)");

			final Rabbit r = new Rabbit(null, "corneju", 6);
			r.setDog(new Dog(null, "din", 8));
			r.store();
			assertEquals(
					"[ID_RABBIT=100, NAME=corneju, AGE=6, NUM_DOG=100=>[ID_DOG=100, NAME=din, AGE=8, [...]]]",
					r.toString());

			final Rabbit r2 = new Rabbit().loadById(100);
			assertEquals("[ID_RABBIT=100, NAME=corneju, AGE=6, NUM_DOG=100=>[...]]", r2.toString());
			r2.getDog();
			assertEquals(
					"[ID_RABBIT=100, NAME=corneju, AGE=6, NUM_DOG=100=>[ID_DOG=100, NAME=din, AGE=8, [...]]]",
					r2.toString());

		} finally {
			SessionFactory.getCurrentSession().rollback();
		}
	}

}
