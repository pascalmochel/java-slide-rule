package org.morm.test;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.morm.datasource.HsqldbDataSourceFactory;
import org.morm.logging.LogFactory;
import org.morm.logging.SingleLineFormatter;
import org.morm.mapper.DataMapper;
import org.morm.session.SessionFactory;

import java.util.Arrays;
import java.util.logging.Handler;
import java.util.logging.Level;

import static org.junit.Assert.*;

public class SaveTest {

	static {

		final SingleLineFormatter singleLineFormatter = new SingleLineFormatter();
		for (final Handler h : LogFactory.getRootLogger().getHandlers()) {
			h.setFormatter(singleLineFormatter);
			h.setLevel(Level.FINE);
		}

		LogFactory.getRootLogger().setLevel(Level.FINE);
		new SessionFactory().setDataSource(new HsqldbDataSourceFactory().getDataSource());
	}

	@Before
	public void before() {
		SessionFactory.getCurrentSession().beginTransaction();

		DataMapper.executeDDLIgnoringErrors("DROP TABLE RABBIT");
		DataMapper.executeDDLIgnoringErrors("DROP TABLE DOG");

		DataMapper.executeDDL(
		/**/"CREATE TABLE RABBIT (" +
		/**/"ID_RABBIT INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"AGE INTEGER," +
		/**/"NUM_DOG INTEGER)"
		/**/);
		DataMapper.executeDDL(
		/**/"CREATE TABLE DOG (" +
		/**/"ID_DOG INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"AGE INTEGER)"
		/**/);
		SessionFactory.getCurrentSession().commit();
	}

	@After
	public void after() {
		SessionFactory.getCurrentSession().beginTransaction();
		DataMapper.executeDDL("DROP TABLE RABBIT");
		DataMapper.executeDDL("DROP TABLE DOG");
		SessionFactory.getCurrentSession().commit();
	}

	@Test
	public void testname() throws Exception {

		SessionFactory.getCurrentSession().beginTransaction();
		// DataMapper.executeDDL("INSERT INTO DOG (ID_DOG,NAME,AGE) VALUES (500,'din',9)");
		// DataMapper
		// .executeDDL("INSERT INTO RABBIT (ID_RABBIT,NAME,AGE,NUM_DOG) VALUES (600,'cornill',5, 500)");

		final Dog d = new Dog(null, "din", 10);
		d.setRabbits(Arrays.asList(new Rabbit(null, "corneju1", 3), new Rabbit(null, "corneju2", 4)));

		d.store();
		System.out.println("====================================");

		final Dog d2 = new Dog().loadById(100);
		assertEquals("[ID_DOG=100, NAME=din, AGE=10, [...]]", d2.toString());
		d2.getRabbits();
		assertEquals(
		/**/"[ID_DOG=100, NAME=din, AGE=10, " +
		/**/"[[ID_RABBIT=100, NAME=corneju1, AGE=3, NUM_DOG=100=>[...]], " +
		/**/"[ID_RABBIT=101, NAME=corneju2, AGE=4, NUM_DOG=100=>[...]]]]",
		/**/d2.toString());

		SessionFactory.getCurrentSession().rollback();
	}

}
