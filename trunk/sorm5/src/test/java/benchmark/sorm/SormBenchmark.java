package benchmark.sorm;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.morm.datasource.HsqldbDataSourceFactory;
import org.morm.mapper.DataMapper;
import org.morm.record.Entity;
import org.morm.session.SessionFactory;

import static org.junit.Assert.*;

public class SormBenchmark {

	static {
		new SessionFactory().setDataSource(new HsqldbDataSourceFactory().getDataSource());
	}

	@Test
	public void testname() throws Exception {

		SessionFactory.getSession().open();

		try {
			SormDog d = new SormDog(null, "din", 9);
			d.store();

			d = Entity.loadById(SormDog.class, d.getId());

			assertEquals("[ID_DOG=*, NAME=din, AGE=9]", d.toString().replaceAll("ID_DOG=\\d+", "ID_DOG=*"));

			SessionFactory.getSession().commit();
		} catch (final Exception e) {
			SessionFactory.getSession().rollback();
			throw e;
		}
	}

	@Before
	public void before() {
		SessionFactory.getSession().open();

		DataMapper.executeDDLIgnoringErrors("DROP TABLE DOG");
		DataMapper.executeDDLIgnoringErrors("DROP SEQUENCE DOG_SEQUENCE");

		DataMapper.executeDDL("CREATE SEQUENCE DOG_SEQUENCE AS INTEGER START WITH 1 INCREMENT BY 1");
		DataMapper.executeDDL(
		/**/"CREATE TABLE DOG (" +
		/**/"ID_DOG INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100) PRIMARY KEY," +
		/**/"NAME VARCHAR(20)," +
		/**/"AGE INTEGER)"
		/**/);
		SessionFactory.getSession().commit();
	}

	@After
	public void after() {
		try {
			SessionFactory.getSession().open();
			DataMapper.executeDDL("DROP SEQUENCE DOG_SEQUENCE");
			DataMapper.executeDDL("DROP TABLE DOG");
			SessionFactory.getSession().commit();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

}
